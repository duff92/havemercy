// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Particle's data
struct Particle
{
	float3 position;
	float3 velocity;
};

// Particle's data, shared with the shader
RWStructuredBuffer<Particle> particleBuffer;

// Variables set from the CPU
float deltaTime;
float3 objectPos;

[numthreads(8, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 delta = objectPos - particleBuffer[id.x].position;
	float3 dir = normalize(delta);

	particleBuffer[id.x].velocity += 5.0f * dir;

	if (50.0f < dot(particleBuffer[id.x].velocity, particleBuffer[id.x].velocity)) {
		particleBuffer[id.x].velocity *= 0.95f;
	}

	particleBuffer[id.x].position += particleBuffer[id.x].velocity * deltaTime;
}
